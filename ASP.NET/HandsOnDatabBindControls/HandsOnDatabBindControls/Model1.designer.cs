#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HandsOnDatabBindControls
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CSCDB")]
	public partial class Model1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    #endregion
		
		public Model1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CSCDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Model1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Model1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Model1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Model1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateProduct")]
		public int UpdateProduct([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> pid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string pname)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pid, pname);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Eid;
		
		private string _Ename;
		
		private string _Desig;
		
		private System.Nullable<decimal> _Sal;
		
		private System.Nullable<System.DateTime> _hiredate;
		
		private string _Did;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEidChanging(int value);
    partial void OnEidChanged();
    partial void OnEnameChanging(string value);
    partial void OnEnameChanged();
    partial void OnDesigChanging(string value);
    partial void OnDesigChanged();
    partial void OnSalChanging(System.Nullable<decimal> value);
    partial void OnSalChanged();
    partial void OnhiredateChanging(System.Nullable<System.DateTime> value);
    partial void OnhiredateChanged();
    partial void OnDidChanging(string value);
    partial void OnDidChanged();
    #endregion
		
		public Employee()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Eid
		{
			get
			{
				return this._Eid;
			}
			set
			{
				if ((this._Eid != value))
				{
					this.OnEidChanging(value);
					this.SendPropertyChanging();
					this._Eid = value;
					this.SendPropertyChanged("Eid");
					this.OnEidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ename", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Ename
		{
			get
			{
				return this._Ename;
			}
			set
			{
				if ((this._Ename != value))
				{
					this.OnEnameChanging(value);
					this.SendPropertyChanging();
					this._Ename = value;
					this.SendPropertyChanged("Ename");
					this.OnEnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desig", DbType="VarChar(30)")]
		public string Desig
		{
			get
			{
				return this._Desig;
			}
			set
			{
				if ((this._Desig != value))
				{
					this.OnDesigChanging(value);
					this.SendPropertyChanging();
					this._Desig = value;
					this.SendPropertyChanged("Desig");
					this.OnDesigChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sal", DbType="Money")]
		public System.Nullable<decimal> Sal
		{
			get
			{
				return this._Sal;
			}
			set
			{
				if ((this._Sal != value))
				{
					this.OnSalChanging(value);
					this.SendPropertyChanging();
					this._Sal = value;
					this.SendPropertyChanged("Sal");
					this.OnSalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hiredate", DbType="DateTime")]
		public System.Nullable<System.DateTime> hiredate
		{
			get
			{
				return this._hiredate;
			}
			set
			{
				if ((this._hiredate != value))
				{
					this.OnhiredateChanging(value);
					this.SendPropertyChanging();
					this._hiredate = value;
					this.SendPropertyChanged("hiredate");
					this.OnhiredateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Did", DbType="Char(10)")]
		public string Did
		{
			get
			{
				return this._Did;
			}
			set
			{
				if ((this._Did != value))
				{
					this.OnDidChanging(value);
					this.SendPropertyChanging();
					this._Did = value;
					this.SendPropertyChanged("Did");
					this.OnDidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
