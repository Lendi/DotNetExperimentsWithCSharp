#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AssetManagementProject.DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AssetManagementProject")]
	public partial class AssetManagementDBModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAssetTable(AssetTable instance);
    partial void UpdateAssetTable(AssetTable instance);
    partial void DeleteAssetTable(AssetTable instance);
    partial void InsertRequestTable(RequestTable instance);
    partial void UpdateRequestTable(RequestTable instance);
    partial void DeleteRequestTable(RequestTable instance);
    partial void InsertUserDetail(UserDetail instance);
    partial void UpdateUserDetail(UserDetail instance);
    partial void DeleteUserDetail(UserDetail instance);
    partial void InsertTranserHistory(TranserHistory instance);
    partial void UpdateTranserHistory(TranserHistory instance);
    partial void DeleteTranserHistory(TranserHistory instance);
    #endregion
		
		public AssetManagementDBModelDataContext() : 
				base(global::AssetManagementProject.Properties.Settings.Default.AssetManagementProjectConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AssetManagementDBModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssetManagementDBModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssetManagementDBModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssetManagementDBModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AssetTable> AssetTables
		{
			get
			{
				return this.GetTable<AssetTable>();
			}
		}
		
		public System.Data.Linq.Table<RequestTable> RequestTables
		{
			get
			{
				return this.GetTable<RequestTable>();
			}
		}
		
		public System.Data.Linq.Table<UserDetail> UserDetails
		{
			get
			{
				return this.GetTable<UserDetail>();
			}
		}
		
		public System.Data.Linq.Table<TranserHistory> TranserHistories
		{
			get
			{
				return this.GetTable<TranserHistory>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssetTable")]
	public partial class AssetTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _Emp_ID;
		
		private int _Asset_ID;
		
		private System.Nullable<int> _Request_ID;
		
		private System.Nullable<System.DateTime> _IssuedDate;
		
		private string _AssetName;
		
		private EntitySet<TranserHistory> _TranserHistories;
		
		private EntityRef<RequestTable> _RequestTable;
		
		private EntityRef<UserDetail> _UserDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmp_IDChanging(System.Nullable<int> value);
    partial void OnEmp_IDChanged();
    partial void OnAsset_IDChanging(int value);
    partial void OnAsset_IDChanged();
    partial void OnRequest_IDChanging(System.Nullable<int> value);
    partial void OnRequest_IDChanged();
    partial void OnIssuedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIssuedDateChanged();
    partial void OnAssetNameChanging(string value);
    partial void OnAssetNameChanged();
    #endregion
		
		public AssetTable()
		{
			this._TranserHistories = new EntitySet<TranserHistory>(new Action<TranserHistory>(this.attach_TranserHistories), new Action<TranserHistory>(this.detach_TranserHistories));
			this._RequestTable = default(EntityRef<RequestTable>);
			this._UserDetail = default(EntityRef<UserDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_ID", DbType="Int")]
		public System.Nullable<int> Emp_ID
		{
			get
			{
				return this._Emp_ID;
			}
			set
			{
				if ((this._Emp_ID != value))
				{
					if (this._UserDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmp_IDChanging(value);
					this.SendPropertyChanging();
					this._Emp_ID = value;
					this.SendPropertyChanged("Emp_ID");
					this.OnEmp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Asset_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Asset_ID
		{
			get
			{
				return this._Asset_ID;
			}
			set
			{
				if ((this._Asset_ID != value))
				{
					this.OnAsset_IDChanging(value);
					this.SendPropertyChanging();
					this._Asset_ID = value;
					this.SendPropertyChanged("Asset_ID");
					this.OnAsset_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Request_ID", DbType="Int")]
		public System.Nullable<int> Request_ID
		{
			get
			{
				return this._Request_ID;
			}
			set
			{
				if ((this._Request_ID != value))
				{
					if (this._RequestTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequest_IDChanging(value);
					this.SendPropertyChanging();
					this._Request_ID = value;
					this.SendPropertyChanged("Request_ID");
					this.OnRequest_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssuedDate", DbType="Date")]
		public System.Nullable<System.DateTime> IssuedDate
		{
			get
			{
				return this._IssuedDate;
			}
			set
			{
				if ((this._IssuedDate != value))
				{
					this.OnIssuedDateChanging(value);
					this.SendPropertyChanging();
					this._IssuedDate = value;
					this.SendPropertyChanged("IssuedDate");
					this.OnIssuedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string AssetName
		{
			get
			{
				return this._AssetName;
			}
			set
			{
				if ((this._AssetName != value))
				{
					this.OnAssetNameChanging(value);
					this.SendPropertyChanging();
					this._AssetName = value;
					this.SendPropertyChanged("AssetName");
					this.OnAssetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetTable_TranserHistory", Storage="_TranserHistories", ThisKey="Asset_ID", OtherKey="Asset_ID")]
		public EntitySet<TranserHistory> TranserHistories
		{
			get
			{
				return this._TranserHistories;
			}
			set
			{
				this._TranserHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequestTable_AssetTable", Storage="_RequestTable", ThisKey="Request_ID", OtherKey="Request_ID", IsForeignKey=true)]
		public RequestTable RequestTable
		{
			get
			{
				return this._RequestTable.Entity;
			}
			set
			{
				RequestTable previousValue = this._RequestTable.Entity;
				if (((previousValue != value) 
							|| (this._RequestTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequestTable.Entity = null;
						previousValue.AssetTables.Remove(this);
					}
					this._RequestTable.Entity = value;
					if ((value != null))
					{
						value.AssetTables.Add(this);
						this._Request_ID = value.Request_ID;
					}
					else
					{
						this._Request_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RequestTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDetail_AssetTable", Storage="_UserDetail", ThisKey="Emp_ID", OtherKey="Emp_ID", IsForeignKey=true)]
		public UserDetail UserDetail
		{
			get
			{
				return this._UserDetail.Entity;
			}
			set
			{
				UserDetail previousValue = this._UserDetail.Entity;
				if (((previousValue != value) 
							|| (this._UserDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserDetail.Entity = null;
						previousValue.AssetTables.Remove(this);
					}
					this._UserDetail.Entity = value;
					if ((value != null))
					{
						value.AssetTables.Add(this);
						this._Emp_ID = value.Emp_ID;
					}
					else
					{
						this._Emp_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TranserHistories(TranserHistory entity)
		{
			this.SendPropertyChanging();
			entity.AssetTable = this;
		}
		
		private void detach_TranserHistories(TranserHistory entity)
		{
			this.SendPropertyChanging();
			entity.AssetTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestTable")]
	public partial class RequestTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Request_ID;
		
		private System.Nullable<int> _Emp_ID;
		
		private string _Short_ID;
		
		private System.Nullable<int> _Manager_ID;
		
		private System.Nullable<System.DateTime> _ManagerApprovedDate;
		
		private string _AssetName;
		
		private System.Nullable<System.DateTime> _RequestDate;
		
		private System.Nullable<int> _Status;
		
		private string _Remarks_Comment;
		
		private EntitySet<AssetTable> _AssetTables;
		
		private EntityRef<UserDetail> _UserDetail;
		
		private EntityRef<UserDetail> _UserDetail1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequest_IDChanging(int value);
    partial void OnRequest_IDChanged();
    partial void OnEmp_IDChanging(System.Nullable<int> value);
    partial void OnEmp_IDChanged();
    partial void OnShort_IDChanging(string value);
    partial void OnShort_IDChanged();
    partial void OnManager_IDChanging(System.Nullable<int> value);
    partial void OnManager_IDChanged();
    partial void OnManagerApprovedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnManagerApprovedDateChanged();
    partial void OnAssetNameChanging(string value);
    partial void OnAssetNameChanged();
    partial void OnRequestDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestDateChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnRemarks_CommentChanging(string value);
    partial void OnRemarks_CommentChanged();
    #endregion
		
		public RequestTable()
		{
			this._AssetTables = new EntitySet<AssetTable>(new Action<AssetTable>(this.attach_AssetTables), new Action<AssetTable>(this.detach_AssetTables));
			this._UserDetail = default(EntityRef<UserDetail>);
			this._UserDetail1 = default(EntityRef<UserDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Request_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Request_ID
		{
			get
			{
				return this._Request_ID;
			}
			set
			{
				if ((this._Request_ID != value))
				{
					this.OnRequest_IDChanging(value);
					this.SendPropertyChanging();
					this._Request_ID = value;
					this.SendPropertyChanged("Request_ID");
					this.OnRequest_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_ID", DbType="Int")]
		public System.Nullable<int> Emp_ID
		{
			get
			{
				return this._Emp_ID;
			}
			set
			{
				if ((this._Emp_ID != value))
				{
					if (this._UserDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmp_IDChanging(value);
					this.SendPropertyChanging();
					this._Emp_ID = value;
					this.SendPropertyChanged("Emp_ID");
					this.OnEmp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Short_ID", DbType="VarChar(25)")]
		public string Short_ID
		{
			get
			{
				return this._Short_ID;
			}
			set
			{
				if ((this._Short_ID != value))
				{
					if (this._UserDetail1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShort_IDChanging(value);
					this.SendPropertyChanging();
					this._Short_ID = value;
					this.SendPropertyChanged("Short_ID");
					this.OnShort_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager_ID", DbType="Int")]
		public System.Nullable<int> Manager_ID
		{
			get
			{
				return this._Manager_ID;
			}
			set
			{
				if ((this._Manager_ID != value))
				{
					this.OnManager_IDChanging(value);
					this.SendPropertyChanging();
					this._Manager_ID = value;
					this.SendPropertyChanged("Manager_ID");
					this.OnManager_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerApprovedDate", DbType="Date")]
		public System.Nullable<System.DateTime> ManagerApprovedDate
		{
			get
			{
				return this._ManagerApprovedDate;
			}
			set
			{
				if ((this._ManagerApprovedDate != value))
				{
					this.OnManagerApprovedDateChanging(value);
					this.SendPropertyChanging();
					this._ManagerApprovedDate = value;
					this.SendPropertyChanged("ManagerApprovedDate");
					this.OnManagerApprovedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string AssetName
		{
			get
			{
				return this._AssetName;
			}
			set
			{
				if ((this._AssetName != value))
				{
					this.OnAssetNameChanging(value);
					this.SendPropertyChanging();
					this._AssetName = value;
					this.SendPropertyChanged("AssetName");
					this.OnAssetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="Date")]
		public System.Nullable<System.DateTime> RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks_Comment", DbType="VarChar(100)")]
		public string Remarks_Comment
		{
			get
			{
				return this._Remarks_Comment;
			}
			set
			{
				if ((this._Remarks_Comment != value))
				{
					this.OnRemarks_CommentChanging(value);
					this.SendPropertyChanging();
					this._Remarks_Comment = value;
					this.SendPropertyChanged("Remarks_Comment");
					this.OnRemarks_CommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequestTable_AssetTable", Storage="_AssetTables", ThisKey="Request_ID", OtherKey="Request_ID")]
		public EntitySet<AssetTable> AssetTables
		{
			get
			{
				return this._AssetTables;
			}
			set
			{
				this._AssetTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDetail_RequestTable", Storage="_UserDetail", ThisKey="Emp_ID", OtherKey="Emp_ID", IsForeignKey=true)]
		public UserDetail UserDetail
		{
			get
			{
				return this._UserDetail.Entity;
			}
			set
			{
				UserDetail previousValue = this._UserDetail.Entity;
				if (((previousValue != value) 
							|| (this._UserDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserDetail.Entity = null;
						previousValue.RequestTables.Remove(this);
					}
					this._UserDetail.Entity = value;
					if ((value != null))
					{
						value.RequestTables.Add(this);
						this._Emp_ID = value.Emp_ID;
					}
					else
					{
						this._Emp_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDetail_RequestTable1", Storage="_UserDetail1", ThisKey="Short_ID", OtherKey="Short_ID", IsForeignKey=true)]
		public UserDetail UserDetail1
		{
			get
			{
				return this._UserDetail1.Entity;
			}
			set
			{
				UserDetail previousValue = this._UserDetail1.Entity;
				if (((previousValue != value) 
							|| (this._UserDetail1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserDetail1.Entity = null;
						previousValue.RequestTables1.Remove(this);
					}
					this._UserDetail1.Entity = value;
					if ((value != null))
					{
						value.RequestTables1.Add(this);
						this._Short_ID = value.Short_ID;
					}
					else
					{
						this._Short_ID = default(string);
					}
					this.SendPropertyChanged("UserDetail1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssetTables(AssetTable entity)
		{
			this.SendPropertyChanging();
			entity.RequestTable = this;
		}
		
		private void detach_AssetTables(AssetTable entity)
		{
			this.SendPropertyChanging();
			entity.RequestTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserDetail")]
	public partial class UserDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Emp_ID;
		
		private string _Short_ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email_ID;
		
		private string _Password;
		
		private System.Nullable<int> _Manager_ID;
		
		private string _Designation;
		
		private System.Nullable<int> _Mobile;
		
		private System.Nullable<System.DateTime> _DateOfJoining;
		
		private string _Active;
		
		private EntitySet<AssetTable> _AssetTables;
		
		private EntitySet<RequestTable> _RequestTables;
		
		private EntitySet<RequestTable> _RequestTables1;
		
		private EntitySet<TranserHistory> _TranserHistories;
		
		private EntitySet<TranserHistory> _TranserHistories1;
		
		private EntitySet<TranserHistory> _TranserHistories2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmp_IDChanging(int value);
    partial void OnEmp_IDChanged();
    partial void OnShort_IDChanging(string value);
    partial void OnShort_IDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmail_IDChanging(string value);
    partial void OnEmail_IDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnManager_IDChanging(System.Nullable<int> value);
    partial void OnManager_IDChanged();
    partial void OnDesignationChanging(string value);
    partial void OnDesignationChanged();
    partial void OnMobileChanging(System.Nullable<int> value);
    partial void OnMobileChanged();
    partial void OnDateOfJoiningChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfJoiningChanged();
    partial void OnActiveChanging(string value);
    partial void OnActiveChanged();
    #endregion
		
		public UserDetail()
		{
			this._AssetTables = new EntitySet<AssetTable>(new Action<AssetTable>(this.attach_AssetTables), new Action<AssetTable>(this.detach_AssetTables));
			this._RequestTables = new EntitySet<RequestTable>(new Action<RequestTable>(this.attach_RequestTables), new Action<RequestTable>(this.detach_RequestTables));
			this._RequestTables1 = new EntitySet<RequestTable>(new Action<RequestTable>(this.attach_RequestTables1), new Action<RequestTable>(this.detach_RequestTables1));
			this._TranserHistories = new EntitySet<TranserHistory>(new Action<TranserHistory>(this.attach_TranserHistories), new Action<TranserHistory>(this.detach_TranserHistories));
			this._TranserHistories1 = new EntitySet<TranserHistory>(new Action<TranserHistory>(this.attach_TranserHistories1), new Action<TranserHistory>(this.detach_TranserHistories1));
			this._TranserHistories2 = new EntitySet<TranserHistory>(new Action<TranserHistory>(this.attach_TranserHistories2), new Action<TranserHistory>(this.detach_TranserHistories2));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Emp_ID
		{
			get
			{
				return this._Emp_ID;
			}
			set
			{
				if ((this._Emp_ID != value))
				{
					this.OnEmp_IDChanging(value);
					this.SendPropertyChanging();
					this._Emp_ID = value;
					this.SendPropertyChanged("Emp_ID");
					this.OnEmp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Short_ID", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Short_ID
		{
			get
			{
				return this._Short_ID;
			}
			set
			{
				if ((this._Short_ID != value))
				{
					this.OnShort_IDChanging(value);
					this.SendPropertyChanging();
					this._Short_ID = value;
					this.SendPropertyChanged("Short_ID");
					this.OnShort_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(25)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email_ID", DbType="VarChar(25)")]
		public string Email_ID
		{
			get
			{
				return this._Email_ID;
			}
			set
			{
				if ((this._Email_ID != value))
				{
					this.OnEmail_IDChanging(value);
					this.SendPropertyChanging();
					this._Email_ID = value;
					this.SendPropertyChanged("Email_ID");
					this.OnEmail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(25)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager_ID", DbType="Int")]
		public System.Nullable<int> Manager_ID
		{
			get
			{
				return this._Manager_ID;
			}
			set
			{
				if ((this._Manager_ID != value))
				{
					this.OnManager_IDChanging(value);
					this.SendPropertyChanging();
					this._Manager_ID = value;
					this.SendPropertyChanged("Manager_ID");
					this.OnManager_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Designation", DbType="VarChar(25)")]
		public string Designation
		{
			get
			{
				return this._Designation;
			}
			set
			{
				if ((this._Designation != value))
				{
					this.OnDesignationChanging(value);
					this.SendPropertyChanging();
					this._Designation = value;
					this.SendPropertyChanged("Designation");
					this.OnDesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="Int")]
		public System.Nullable<int> Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfJoining", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfJoining
		{
			get
			{
				return this._DateOfJoining;
			}
			set
			{
				if ((this._DateOfJoining != value))
				{
					this.OnDateOfJoiningChanging(value);
					this.SendPropertyChanging();
					this._DateOfJoining = value;
					this.SendPropertyChanged("DateOfJoining");
					this.OnDateOfJoiningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="VarChar(1)")]
		public string Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDetail_AssetTable", Storage="_AssetTables", ThisKey="Emp_ID", OtherKey="Emp_ID")]
		public EntitySet<AssetTable> AssetTables
		{
			get
			{
				return this._AssetTables;
			}
			set
			{
				this._AssetTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDetail_RequestTable", Storage="_RequestTables", ThisKey="Emp_ID", OtherKey="Emp_ID")]
		public EntitySet<RequestTable> RequestTables
		{
			get
			{
				return this._RequestTables;
			}
			set
			{
				this._RequestTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDetail_RequestTable1", Storage="_RequestTables1", ThisKey="Short_ID", OtherKey="Short_ID")]
		public EntitySet<RequestTable> RequestTables1
		{
			get
			{
				return this._RequestTables1;
			}
			set
			{
				this._RequestTables1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDetail_TranserHistory", Storage="_TranserHistories", ThisKey="Emp_ID", OtherKey="From_Emp_ID")]
		public EntitySet<TranserHistory> TranserHistories
		{
			get
			{
				return this._TranserHistories;
			}
			set
			{
				this._TranserHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDetail_TranserHistory1", Storage="_TranserHistories1", ThisKey="Emp_ID", OtherKey="Manager_ID")]
		public EntitySet<TranserHistory> TranserHistories1
		{
			get
			{
				return this._TranserHistories1;
			}
			set
			{
				this._TranserHistories1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDetail_TranserHistory2", Storage="_TranserHistories2", ThisKey="Emp_ID", OtherKey="To_Emp_ID")]
		public EntitySet<TranserHistory> TranserHistories2
		{
			get
			{
				return this._TranserHistories2;
			}
			set
			{
				this._TranserHistories2.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssetTables(AssetTable entity)
		{
			this.SendPropertyChanging();
			entity.UserDetail = this;
		}
		
		private void detach_AssetTables(AssetTable entity)
		{
			this.SendPropertyChanging();
			entity.UserDetail = null;
		}
		
		private void attach_RequestTables(RequestTable entity)
		{
			this.SendPropertyChanging();
			entity.UserDetail = this;
		}
		
		private void detach_RequestTables(RequestTable entity)
		{
			this.SendPropertyChanging();
			entity.UserDetail = null;
		}
		
		private void attach_RequestTables1(RequestTable entity)
		{
			this.SendPropertyChanging();
			entity.UserDetail1 = this;
		}
		
		private void detach_RequestTables1(RequestTable entity)
		{
			this.SendPropertyChanging();
			entity.UserDetail1 = null;
		}
		
		private void attach_TranserHistories(TranserHistory entity)
		{
			this.SendPropertyChanging();
			entity.UserDetail = this;
		}
		
		private void detach_TranserHistories(TranserHistory entity)
		{
			this.SendPropertyChanging();
			entity.UserDetail = null;
		}
		
		private void attach_TranserHistories1(TranserHistory entity)
		{
			this.SendPropertyChanging();
			entity.UserDetail1 = this;
		}
		
		private void detach_TranserHistories1(TranserHistory entity)
		{
			this.SendPropertyChanging();
			entity.UserDetail1 = null;
		}
		
		private void attach_TranserHistories2(TranserHistory entity)
		{
			this.SendPropertyChanging();
			entity.UserDetail2 = this;
		}
		
		private void detach_TranserHistories2(TranserHistory entity)
		{
			this.SendPropertyChanging();
			entity.UserDetail2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TranserHistory")]
	public partial class TranserHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Transfer_ID;
		
		private System.Nullable<int> _From_Emp_ID;
		
		private System.Nullable<int> _Manager_ID;
		
		private System.Nullable<int> _Asset_ID;
		
		private System.Nullable<int> _To_Emp_ID;
		
		private System.Nullable<System.DateTime> _TransferDate;
		
		private System.Nullable<int> _Transfer_Status;
		
		private string _Comment_Remarks;
		
		private EntityRef<AssetTable> _AssetTable;
		
		private EntityRef<UserDetail> _UserDetail;
		
		private EntityRef<UserDetail> _UserDetail1;
		
		private EntityRef<UserDetail> _UserDetail2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransfer_IDChanging(int value);
    partial void OnTransfer_IDChanged();
    partial void OnFrom_Emp_IDChanging(System.Nullable<int> value);
    partial void OnFrom_Emp_IDChanged();
    partial void OnManager_IDChanging(System.Nullable<int> value);
    partial void OnManager_IDChanged();
    partial void OnAsset_IDChanging(System.Nullable<int> value);
    partial void OnAsset_IDChanged();
    partial void OnTo_Emp_IDChanging(System.Nullable<int> value);
    partial void OnTo_Emp_IDChanged();
    partial void OnTransferDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTransferDateChanged();
    partial void OnTransfer_StatusChanging(System.Nullable<int> value);
    partial void OnTransfer_StatusChanged();
    partial void OnComment_RemarksChanging(string value);
    partial void OnComment_RemarksChanged();
    #endregion
		
		public TranserHistory()
		{
			this._AssetTable = default(EntityRef<AssetTable>);
			this._UserDetail = default(EntityRef<UserDetail>);
			this._UserDetail1 = default(EntityRef<UserDetail>);
			this._UserDetail2 = default(EntityRef<UserDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transfer_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Transfer_ID
		{
			get
			{
				return this._Transfer_ID;
			}
			set
			{
				if ((this._Transfer_ID != value))
				{
					this.OnTransfer_IDChanging(value);
					this.SendPropertyChanging();
					this._Transfer_ID = value;
					this.SendPropertyChanged("Transfer_ID");
					this.OnTransfer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_From_Emp_ID", DbType="Int")]
		public System.Nullable<int> From_Emp_ID
		{
			get
			{
				return this._From_Emp_ID;
			}
			set
			{
				if ((this._From_Emp_ID != value))
				{
					if (this._UserDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFrom_Emp_IDChanging(value);
					this.SendPropertyChanging();
					this._From_Emp_ID = value;
					this.SendPropertyChanged("From_Emp_ID");
					this.OnFrom_Emp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager_ID", DbType="Int")]
		public System.Nullable<int> Manager_ID
		{
			get
			{
				return this._Manager_ID;
			}
			set
			{
				if ((this._Manager_ID != value))
				{
					if (this._UserDetail1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManager_IDChanging(value);
					this.SendPropertyChanging();
					this._Manager_ID = value;
					this.SendPropertyChanged("Manager_ID");
					this.OnManager_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Asset_ID", DbType="Int")]
		public System.Nullable<int> Asset_ID
		{
			get
			{
				return this._Asset_ID;
			}
			set
			{
				if ((this._Asset_ID != value))
				{
					if (this._AssetTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAsset_IDChanging(value);
					this.SendPropertyChanging();
					this._Asset_ID = value;
					this.SendPropertyChanged("Asset_ID");
					this.OnAsset_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_To_Emp_ID", DbType="Int")]
		public System.Nullable<int> To_Emp_ID
		{
			get
			{
				return this._To_Emp_ID;
			}
			set
			{
				if ((this._To_Emp_ID != value))
				{
					if (this._UserDetail2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTo_Emp_IDChanging(value);
					this.SendPropertyChanging();
					this._To_Emp_ID = value;
					this.SendPropertyChanged("To_Emp_ID");
					this.OnTo_Emp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TransferDate
		{
			get
			{
				return this._TransferDate;
			}
			set
			{
				if ((this._TransferDate != value))
				{
					this.OnTransferDateChanging(value);
					this.SendPropertyChanging();
					this._TransferDate = value;
					this.SendPropertyChanged("TransferDate");
					this.OnTransferDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transfer_Status", DbType="Int")]
		public System.Nullable<int> Transfer_Status
		{
			get
			{
				return this._Transfer_Status;
			}
			set
			{
				if ((this._Transfer_Status != value))
				{
					this.OnTransfer_StatusChanging(value);
					this.SendPropertyChanging();
					this._Transfer_Status = value;
					this.SendPropertyChanged("Transfer_Status");
					this.OnTransfer_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment_Remarks", DbType="VarChar(100)")]
		public string Comment_Remarks
		{
			get
			{
				return this._Comment_Remarks;
			}
			set
			{
				if ((this._Comment_Remarks != value))
				{
					this.OnComment_RemarksChanging(value);
					this.SendPropertyChanging();
					this._Comment_Remarks = value;
					this.SendPropertyChanged("Comment_Remarks");
					this.OnComment_RemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetTable_TranserHistory", Storage="_AssetTable", ThisKey="Asset_ID", OtherKey="Asset_ID", IsForeignKey=true)]
		public AssetTable AssetTable
		{
			get
			{
				return this._AssetTable.Entity;
			}
			set
			{
				AssetTable previousValue = this._AssetTable.Entity;
				if (((previousValue != value) 
							|| (this._AssetTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetTable.Entity = null;
						previousValue.TranserHistories.Remove(this);
					}
					this._AssetTable.Entity = value;
					if ((value != null))
					{
						value.TranserHistories.Add(this);
						this._Asset_ID = value.Asset_ID;
					}
					else
					{
						this._Asset_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AssetTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDetail_TranserHistory", Storage="_UserDetail", ThisKey="From_Emp_ID", OtherKey="Emp_ID", IsForeignKey=true)]
		public UserDetail UserDetail
		{
			get
			{
				return this._UserDetail.Entity;
			}
			set
			{
				UserDetail previousValue = this._UserDetail.Entity;
				if (((previousValue != value) 
							|| (this._UserDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserDetail.Entity = null;
						previousValue.TranserHistories.Remove(this);
					}
					this._UserDetail.Entity = value;
					if ((value != null))
					{
						value.TranserHistories.Add(this);
						this._From_Emp_ID = value.Emp_ID;
					}
					else
					{
						this._From_Emp_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDetail_TranserHistory1", Storage="_UserDetail1", ThisKey="Manager_ID", OtherKey="Emp_ID", IsForeignKey=true)]
		public UserDetail UserDetail1
		{
			get
			{
				return this._UserDetail1.Entity;
			}
			set
			{
				UserDetail previousValue = this._UserDetail1.Entity;
				if (((previousValue != value) 
							|| (this._UserDetail1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserDetail1.Entity = null;
						previousValue.TranserHistories1.Remove(this);
					}
					this._UserDetail1.Entity = value;
					if ((value != null))
					{
						value.TranserHistories1.Add(this);
						this._Manager_ID = value.Emp_ID;
					}
					else
					{
						this._Manager_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserDetail1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDetail_TranserHistory2", Storage="_UserDetail2", ThisKey="To_Emp_ID", OtherKey="Emp_ID", IsForeignKey=true)]
		public UserDetail UserDetail2
		{
			get
			{
				return this._UserDetail2.Entity;
			}
			set
			{
				UserDetail previousValue = this._UserDetail2.Entity;
				if (((previousValue != value) 
							|| (this._UserDetail2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserDetail2.Entity = null;
						previousValue.TranserHistories2.Remove(this);
					}
					this._UserDetail2.Entity = value;
					if ((value != null))
					{
						value.TranserHistories2.Add(this);
						this._To_Emp_ID = value.Emp_ID;
					}
					else
					{
						this._To_Emp_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserDetail2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
